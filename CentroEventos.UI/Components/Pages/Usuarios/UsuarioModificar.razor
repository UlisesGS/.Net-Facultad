@using CentroEventos.Aplicacion
@using CentroEventos.Aplicacion.Enums

@inject UsuarioModificacionUseCase Modificar
@inject ServicioAutorizacion ServicioAutorizacion
@inject ServicioLogin Login
@inject NavigationManager Navigation

@namespace CentroEventos.UI.Components.Pages.Usuarios

<div class="modal fade @(Mostrar ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content formulario-wrapper formulario-con-borde text-dark">
            <EditForm Model="@usAux" OnValidSubmit="HandleSubmit" FormName="modificarUsuario">
                <DataAnnotationsValidator />

                <div class="modal-header form-header">
                    <h5 class="modal-title">Modificar Usuario</h5>
                    <button type="button" class="btn-close" @onclick="Cerrar"></button>
                </div>

                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    <div class="mb-3">
                        <label class="form-label">Nombre</label>
                        <InputText @bind-Value="usAux.Nombre" class="form-control borde-personalizado" />
                        <ValidationMessage For="@(() => usAux.Nombre)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Apellido</label>
                        <InputText @bind-Value="usAux.Apellido" class="form-control borde-personalizado" />
                        <ValidationMessage For="@(() => usAux.Apellido)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <InputText @bind-Value="usAux.Email" class="form-control borde-personalizado" />
                        <ValidationMessage For="@(() => usAux.Email)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Contrase√±a</label>
                        <InputText type="password" @bind-Value="usAux.HashPassword" class="form-control borde-personalizado" />
                        <ValidationMessage For="@(() => usAux.HashPassword)" />
                    </div>
                </div>

                <div class="modal-footer bg-footer">
                    <button class="btn btn-danger" type="button" @onclick="Cerrar">Cancelar</button>
                    <button class="btn btn-success" type="submit">Guardar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<style>
   .formulario-wrapper {
    max-width: 600px;
    width: 100%;
}

.formulario-con-borde {
    background: linear-gradient(to bottom, #1c2a29, #305861);
    box-shadow: 0 0 10px rgba(0,0,0,0.2);
    border-radius: 20px;
    overflow: hidden;
}

.formulario-con-borde .form-label {
    color: white;
}

.borde-personalizado {
    border: 2px solid #1c2a29 ;
    border-radius: 12px;
}

/* Header del formulario */
.form-header {
    background-color: #478689;
    color: white;
}

/* Footer de botones */
.bg-footer {
    background-color: #478689;
    color: white;
}
</style>

@code {
    [Parameter] public Usuario usAux { get; set; } = new();
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public bool Mostrar { get; set; }

    private string? errorMessage;

    protected override void OnParametersSet()
    {
        if (usAux == null)
            usAux = new Usuario();
    }

    private async Task HandleSubmit()
    {
        errorMessage = null;
        try
        {
            var user = Login.GetUser();
            if (user == null)
            {
                Navigation.NavigateTo("/", true);
                return;
            }

            if (!ServicioAutorizacion.PoseeElPermiso(user.Id, EnumPermiso.UsuarioAlta))
            {
                Navigation.NavigateTo("/no-autorizado");
                return;
            }

            Modificar.Ejecutar(usAux, user.Id);
            await Cerrar();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task Cerrar()
    {
        await OnClose.InvokeAsync();
    }
}