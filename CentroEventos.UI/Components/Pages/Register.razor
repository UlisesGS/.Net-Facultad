@page "/registro"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using CentroEventos.Aplicacion
@using CentroEventos.Aplicacion.Entidades
@inject UsuarioAltaUseCase Alta
@inject NavigationManager Navigation
@attribute [Layout(typeof(EmptyLayout))]

<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="formulario-wrapper formulario-con-borde text-white" style="max-width: 400px;"> <!-- Más angosto -->

        <!-- Header del formulario -->
        <div class="form-header p-3 rounded-top">
            <h3 class="text-center m-0">REGISTRARSE</h3>
        </div>

        <div class="p-4">
            

            <EditForm Model="@usAux" OnValidSubmit="HandleSubmit" FormName="registroForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                @* Mensaje de éxito general *@
                @if (success)
                {
                    <div class="alert alert-success">
                        Usuario creado correctamente.
                    </div>
                }

                @* Mensaje de error genérico *@
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">
                        @errorMessage
                    </div>
                }

                <div class="mb-3">
                    <label for="nombre" class="form-label">Nombre</label>
                    <InputText @bind-Value="usAux.Nombre" class="form-control borde-personalizado text-dark" />
                    <ValidationMessage For="@(() => usAux.Nombre)" />
                </div>

                <div class="mb-3">
                    <label for="apellido" class="form-label">Apellido</label>
                    <InputText @bind-Value="usAux.Apellido" class="form-control borde-personalizado text-dark" />
                    <ValidationMessage For="@(() => usAux.Apellido)" />
                </div>

                <div class="mb-3">
                    <label for="email" class="form-label">Correo electrónico</label>
                    <InputText @bind-Value="usAux.Email" class="form-control borde-personalizado text-dark" />
                    <ValidationMessage For="@(() => usAux.Email)" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Contraseña</label>
                    <InputText type="password" @bind-Value="usAux.HashPassword" class="form-control borde-personalizado text-dark" />
                    <ValidationMessage For="@(() => usAux.HashPassword)" />
                </div>

                <!-- Footer con botones alineados -->
                
                <div class="form-footer d-flex justify-content-between align-items-center p-2 rounded-bottom">
                    <div class="form-footer p-2 rounded-bottom">
                        <span class="text-white d-block">¿Ya tenés cuenta?</span>
                        <NavLink href="/" class="btn btn-warning btn-sm mt-2 ms-3">Iniciar sesión</NavLink>
                    </div>
                    <button type="submit" class="btn btn-success">Registrarse</button>
                </div>
                
            </EditForm>
            
        </div>
    </div>
</div>


<style>
.formulario-wrapper {
    width: 100%;
}

.formulario-con-borde {
    background: linear-gradient(to bottom, #1c2a29, #305861);
    box-shadow: 0 0 10px rgba(0,0,0,0.2);
    border-radius: 20px;
    overflow: hidden;
}

.formulario-con-borde .form-label {
    color: white;
}

.borde-personalizado {
    border: 2px solid #1c2a29;
    border-radius: 12px;
}

.form-header {
    background-color: #478689;
}

.bg-footer {
    background-color: #478689;
}

</style>

@code {

    private string? errorMessage;
    private bool success = false;
    private Usuario usAux = new Usuario();

    private async Task HandleSubmit()
    {
        errorMessage = null;
        success = false;

        try
        {
            
            Alta.Ejecutar(usAux);
            success = true;
            await Task.Delay(2000); // Mostrar mensaje de éxito antes de redirigir
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al registrar el usuario: {ex.Message}";
        }
    }

}