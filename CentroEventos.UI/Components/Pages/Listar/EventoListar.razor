@page "/evento-listar"

@rendermode InteractiveServer
@using CentroEventos.Aplicacion
@using CentroEventos.Aplicacion.Entidades
@using CentroEventos.Aplicacion.CasosDeUsos.Evento
@using CentroEventos.UI.Components.Pages.Crear
@inject ServicioLogin Login
@inject EventoDeportivoBuscarPorIdUseCase BuscarId
@inject EventoDeportivoListarUseCase Listar
@inject EventoDeportivoBajaUseCase Baja
@inject NavigationManager Navigation

<div class="bg-personas-header rounded p-3">
    <div class="d-flex align-items-start flex-column flex-md-row gap-3 mb-3">
        <h4 class="m-0 text-white p-2">Listado de Eventos</h4>
        <button type="button" class="btn btn-success mt-2" @onclick="() => mostrarModalCrear = true">
            <i class="bi bi-plus-circle me-1"></i> Crear Evento
        </button>
    </div>

    <div class="table-responsive">
        <table class="table table-striped">
            <thead class="thead-custom">
                <tr>
                    <th>ID</th>
                    <th>Responsable</th>
                    <th>Cupo maximo</th>
                    <th>Fecha inicio</th>
                    <th>Duracion horas</th>
                    <th>Nombre</th>
                    <th>Descripcion</th>
                    <th>Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var evento in eventos)
                {
                    <tr>
                        <td>@evento.Id</td>
                        <td>@evento.ResponsableId</td>
                        <td>@evento.CupoMaximo</td>
                        <td>@evento.FechaHoraInicio</td>
                        <td>@evento.DuracionHoras</td>
                        <td>@evento.Nombre</td>
                        <td>@evento.Descripcion</td>
                        <td>
                            <button type="button" class="btn btn-primary btn-sm me-1" @onclick="() => AbrirModalModificar(evento.Id)">
                                <i class="bi bi-pencil-square"></i>
                            </button>
                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => AbrirModalEliminar(evento)">
                                <i class="bi bi-archive"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (mostrarModalCrear)
{
    <EventoCrear Mostrar="@mostrarModalCrear" OnClose="CerrarModalCrear" />
}

@if (mostrarModalModificar && eventoSeleccionado != null)
{
    <EventoCrear Mostrar="@mostrarModalModificar" eventoAux="@eventoSeleccionado" OnClose="CerrarModalModificar" />
}

@if (mostrarModalEliminar && eventoSeleccionado != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5); z-index: 1050;">
        <div class="modal-dialog">
            <div class="modal-content formulario-wrapper formulario-con-borde text-dark">
                <div class="modal-header form-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CancelarEliminar"></button>
                </div>
                <div class="modal-body text-white">
                    <p>¿Estás seguro que querés eliminar a <strong>@eventoSeleccionado.Nombre</strong>?</p>
                </div>
                <div class="modal-footer bg-footer">
                    <button class="btn btn-secondary" @onclick="CancelarEliminar">Cancelar</button>
                    <button class="btn btn-danger" @onclick="ConfirmarEliminar">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}
    


<style>
.bg-personas-header {
    background-color: #1c2a29;
}

.thead-custom {
    background-color: #478689 ;
}

.thead-custom th {
    background-color: #478689 ;
    color: white ;
}


</style>

@code {

    private List<EventoDeportivo> eventos = new();
    private EventoDeportivo? eventoSeleccionado;
    private bool mostrarModalCrear = false;
    private bool mostrarModalModificar = false;
    private bool mostrarModalEliminar = false;
    private bool primerRender = true;

    protected override async Task OnAfterRenderAsync(bool Render)
    {

        if (primerRender)
        {
            await Task.Delay(10);
            primerRender = false;

            var user = Login.GetUser();

            if (user == null)
            {
                Navigation.NavigateTo("/", true);
                return;
            }

            eventos = Listar.Ejecutar();
            StateHasChanged();
        }
    
    }
    
    private void AbrirModalModificar(int id)
    {
        var e = BuscarId.Ejecutar(id);
        eventoSeleccionado = new EventoDeportivo
        {
            Id = e.Id,
            ResponsableId = e.ResponsableId,
            CupoMaximo = e.CupoMaximo,
            FechaHoraInicio = e.FechaHoraInicio,
            DuracionHoras = e.DuracionHoras,
            Nombre = e.Nombre,
            Descripcion = e.Descripcion
        };
        mostrarModalModificar = true;
    }

    private void AbrirModalEliminar(EventoDeportivo evento)
    {
        eventoSeleccionado = evento;
        mostrarModalEliminar = true;
    }

    private void CancelarEliminar()
    {
        mostrarModalEliminar = false;
        eventoSeleccionado = null;
    }

    private void ConfirmarEliminar()
    {
        try
        {
            var user = Login.GetUser();
            if (eventoSeleccionado != null)
            {
                Baja.Ejecutar(eventoSeleccionado.Id, user.Id);
                eventos.RemoveAll(p => p.Id == eventoSeleccionado.Id);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR: {ex.Message}");
        }
        finally
        {
            mostrarModalEliminar = false;
            eventoSeleccionado = null;
        }
    }

    private Task CerrarModalCrear()
    {
        mostrarModalCrear = false;
        eventos = Listar.Ejecutar();
        return Task.CompletedTask;
    }

    private Task CerrarModalModificar()
    {
        mostrarModalModificar = false;
        eventos = Listar.Ejecutar();
        return Task.CompletedTask;
    }
}