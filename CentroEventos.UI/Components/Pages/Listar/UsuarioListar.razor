@page "/usuario-listar"
@rendermode InteractiveServer
@using CentroEventos.Aplicacion
@using CentroEventos.UI.Components.Pages.Usuarios
@inject UsuarioListarUseCase Listar
@inject ServicioAutorizacion ServicioAutorizacion
@inject UsuarioBuscarIdUseCase UsuarioBuscarId

@using CentroEventos.Aplicacion.Enums
@inject ServicioLogin Login
@inject NavigationManager Navigation
@inject UsuarioBajaUseCase UsuarioBaja

<div class="bg-personas-header rounded p-3">
    <div class="d-flex align-items-start flex-column flex-md-row gap-3 mb-3">
        <h4 class="m-0 text-white p-2">Listado de Usuarios</h4>
    </div>


    <div class="table-responsive">
        <table class="table table-striped">
            <thead class="thead-custom">
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Email</th>
                    <th>Permisos</th>
                    <th>Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var usuario in usuarios)
                {
                    <tr>
                        <td>@usuario.Id</td>
                        <td>@usuario.Nombre</td>
                        <td>@usuario.Apellido</td>
                        <td>@usuario.Email</td>

                        <td>
                            @if (idLog == idAdmin)
                            {
                                <button type="button" class="btn btn-warning btn-sm me-1" @onclick="() => AbrirModalPermisos(usuario.Id)">
                                    Ver Permisos
                                    <i class="bi  bi-exclamation-circle ms-2"></i>
                                </button>
                            }
                            else if(permisoOtorgar && usuario.Id != idAdmin)
                            {
                                <button type="button" class="btn btn-warning btn-sm me-1" @onclick="() => AbrirModalPermisos(usuario.Id)">
                                    Ver Permisos
                                    <i class="bi  bi-exclamation-circle ms-2"></i>
                                </button>
                            }
                            else if(!permisoOtorgar && usuario.Id == idLog)
                            {
                                <button type="button" class="btn btn-warning btn-sm me-1" @onclick="() => AbrirModalPermisos(usuario.Id)">
                                    Ver Permisos
                                    <i class="bi  bi-exclamation-circle ms-2"></i>
                                </button>
                            }
                            else 
                            {
                                <button type="button" class="btn btn-warning btn-sm me-1" disabled>
                                    Ver Permisos
                                    <i class="bi  bi-exclamation-circle ms-2"></i>
                                </button>
                            }
                        </td>

                        <td>
                            @if (idLog == idAdmin)
                            {
                                <button type="button" class="btn btn-primary btn-sm me-1" @onclick="() => AbrirModal(usuario.Id)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                            }
                            else if(permisoModificar && usuario.Id != idAdmin)
                            {
                                <button type="button" class="btn btn-primary btn-sm me-1" @onclick="() => AbrirModal(usuario.Id)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                            }
                            else if(!permisoModificar && usuario.Id == idLog)
                            {
                                <button type="button" class="btn btn-primary btn-sm me-1" @onclick="() => AbrirModal(usuario.Id)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                            }
                            else 
                            {
                                <button type="button" class="btn btn-primary btn-sm me-1" disabled>
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                            }


                            @if(!permisoBaja || usuario.Id==idLog)
                            {
                                <button type="button" class="btn btn-danger btn-sm" disabled>
                                    <i class="bi bi-trash3"></i>
                                </button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-danger btn-sm" @onclick="() => AbrirModalEliminar(usuario)">
                                    <i class="bi bi-trash3"></i>
                                </button>
                            }
                            
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (mostrarModalPermisos && usuarioSeleccionado != null)
{
    <UsuarioPermisos 
        Mostrar="@mostrarModalPermisos"
        Usuario="@usuarioSeleccionado"
        PermisosDisponibles="@permisosDisponibles"
        PermisosSeleccionados="@permisosSeleccionados"
        OnClose="@CerrarModalPermisos"
        idLog="@idLog"/>
}

@if (mostrarModal && usuarioSeleccionado != null)
{
    <UsuarioModificar Mostrar="@mostrarModal" usAux="@usuarioSeleccionado" OnClose="@CerrarModal" />
}

@if (mostrarModalEliminar && usuarioSeleccionado != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5); z-index: 1050;">
        <div class="modal-dialog">
            <div class="modal-content formulario-wrapper formulario-con-borde text-dark">
                <div class="modal-header form-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CancelarEliminar"></button>
                </div>
                <div class="modal-body text-white">
                    <p>¿Estás seguro que querés eliminar a <strong>@usuarioSeleccionado.Nombre @usuarioSeleccionado.Apellido</strong>?</p>
                </div>
                <div class="modal-footer bg-footer">
                    <button class="btn btn-secondary" @onclick="CancelarEliminar">Cancelar</button>
                    <button class="btn btn-danger" @onclick="ConfirmarEliminar">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

<style>
.bg-personas-header {
    background-color: #1c2a29;
}

.thead-custom {
    background-color: #478689 ;
}

.thead-custom th {
    background-color: #478689 ;
}
.formulario-wrapper {
    max-width: 600px;
    width: 100%;
}

.formulario-con-borde {
    background: linear-gradient(to bottom, #1c2a29, #305861);
    box-shadow: 0 0 10px rgba(0,0,0,0.2);
    border-radius: 20px;
    overflow: hidden;
}

.formulario-con-borde .form-label {
    color: white;
}

.borde-personalizado {
    border: 2px solid #1c2a29 ;
    border-radius: 12px;
}

/* Header del formulario */
.form-header {
    background-color: #478689;
    color: white;
}

/* Footer de botones */
.bg-footer {
    background-color: #478689;
    color: white;
}
</style>

@code {
    private List<Usuario> usuarios = new();
        private List<Usuario> usuariosOriginal = new();
    private bool mostrarModalEliminar = false;

    private bool mostrarModal = false;
    private Usuario? usuarioSeleccionado;
    private int idLog = 0;
    private int idAdmin=0;
    private bool primerRender = true;
    private bool permisoModificar=false;
    private bool permisoBaja=false;
    private bool permisoVer=false;
    private bool permisoOtorgar=false;
    private bool mostrarModalPermisos = false;
    
    private List<EnumPermiso> permisosDisponibles = Enum.GetValues<EnumPermiso>().ToList();
    private List<EnumPermiso> permisosSeleccionados = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if (primerRender)
        {
            await Task.Delay(10);
            primerRender = false;

            var user = Login.GetUser();

            if (user == null)
            {
                Navigation.NavigateTo("/", true);
                return;
            }
            idLog=user.Id;
            foreach (EnumPermiso enumPermiso in user.Permisos)
            {
                if (enumPermiso==EnumPermiso.UsuarioBaja)
                {
                    permisoBaja=true;
                }else if (enumPermiso==EnumPermiso.UsuarioModificacion)
                {
                    permisoModificar=true;
                } else if (enumPermiso==EnumPermiso.UsuarioGestion)
                {
                    permisoVer=true;
                } else if(enumPermiso == EnumPermiso.UsuarioOtorgarPermiso)
                {
                    permisoOtorgar=true;
                }
            }
            usuariosOriginal= Listar.Ejecutar();
            idAdmin = usuariosOriginal.First().Id;
            if(permisoVer)
            {
                usuarios = Listar.Ejecutar();
                
            }else{
                usuarios.Add(user);
            }
            StateHasChanged();
        }
    }

    private void AbrirModalEliminar(Usuario usuario)
    {
        usuarioSeleccionado = usuario;
        mostrarModalEliminar = true;
    }

    private void CancelarEliminar()
    {
        mostrarModalEliminar = false;
        usuarioSeleccionado = null;
    }
    
    private void ConfirmarEliminar()
    {
        try
        {
            var user = Login.GetUser();
            if (usuarioSeleccionado != null)
            {
                UsuarioBaja.Ejecutar(usuarioSeleccionado.Id, user.Id);
                usuarios.RemoveAll(u => u.Id == usuarioSeleccionado.Id);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR: {ex.Message}");
        }
        finally
        {
            mostrarModalEliminar = false;
            usuarioSeleccionado = null;
        }
    }

    private void AbrirModal(int id)
    {
        var usuario = UsuarioBuscarId.Ejecutar(id);
        usuarioSeleccionado = new Usuario
        {
            Id = usuario.Id,
            Nombre = usuario.Nombre,
            Apellido = usuario.Apellido,
            Email = usuario.Email,
            HashPassword = string.Empty
        };
        mostrarModal = true;
    }

    private Task CerrarModal()
    {
        mostrarModal = false;
        var user = Login.GetUser();

        if(permisoVer)
        {
            usuarios = Listar.Ejecutar();
        }

        return Task.CompletedTask;
    }


    private void AbrirModalPermisos(int id)
    {
        if(permisoOtorgar)
        {
            var usuario = UsuarioBuscarId.Ejecutar(id);
            usuarioSeleccionado = usuario;
            permisosSeleccionados = usuario.Permisos.ToList();
            mostrarModalPermisos = true;
        }
    }

    private Task CerrarModalPermisos()
    {
        
        mostrarModalPermisos = false;
        usuarioSeleccionado = null;

        var user = UsuarioBuscarId.Ejecutar(idLog); 

        if (user.Permisos.Contains(EnumPermiso.UsuarioGestion))
        {
            usuariosOriginal = Listar.Ejecutar(); 
            usuarios = usuariosOriginal;
        }
        else
        {
            usuarios.Clear();
            usuarios.Add(user);
        }
        
        
        
        return Task.CompletedTask;
    }
    
}
