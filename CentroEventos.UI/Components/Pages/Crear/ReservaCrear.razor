@using CentroEventos.Aplicacion
@using CentroEventos.Aplicacion.Entidades
@using CentroEventos.Aplicacion.CasosDeUsos.Reservas
@using CentroEventos.Aplicacion.Enums
@using System.ComponentModel.DataAnnotations
@using System.Reflection


@inject ReservaAltaUseCase Alta
@inject ReservaModificacionUseCase Modificar
@inject ServicioLogin ServicioLogin
@inject ServicioAutorizacion ServicioAutorizacion
@inject NavigationManager Navigation

@namespace CentroEventos.UI.Components.Pages.Crear

<div class="modal fade @(Mostrar ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content formulario-wrapper formulario-con-borde text-dark">
            <EditForm Model="@reservaAux" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />

                <div class="modal-header form-header">
                    <h5 class="modal-title">@(reservaAux!.Id == 0 ? "Crear Reserva" : "Modificar Reserva")</h5>
                    <button type="button" class="btn-close" @onclick="Cerrar"></button>
                </div>

                <div class="modal-body text-white">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    <div class="mb-3">
                        <label class="form-label">Persona</label>
                        <InputNumber @bind-Value="reservaAux.PersonaId" class="form-control borde-personalizado" />
                        <ValidationMessage For="@(() => reservaAux.PersonaId)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Evento Deportivo</label>
                        <InputNumber @bind-Value="reservaAux.EventoDeportivoId" class="form-control borde-personalizado" />
                        <ValidationMessage For="@(() => reservaAux.EventoDeportivoId)" />
                    </div>
                    @if(reservaAux.Id != 0)
                    {
                        <div class="mb-3">
                            <label class="form-label">Estado Asistencia</label>
                            <InputSelect @bind-Value="reservaAux.EstadoAsistencia" class="form-control borde-personalizado">
                                @foreach (var estado in Enum.GetValues<EnumEstadoAsistencia>())
                                {
                                    var display = estado.GetType()
                                                        .GetMember(estado.ToString())[0]
                                                        .GetCustomAttribute<DisplayAttribute>()?
                                                        .Name ?? estado.ToString();

                                    <option value="@estado">@display</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => reservaAux.EstadoAsistencia)" />
                        </div>
                    }    
                </div>
                <div class="modal-footer bg-footer">
                    <button class="btn btn-danger" type="button" @onclick="Cerrar">Cancelar</button>
                    <button class="btn btn-success" type="submit">Guardar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<style>
.formulario-wrapper {
    max-width: 600px;
    width: 100%;
}

.formulario-con-borde {
    background: linear-gradient(to bottom, #1c2a29, #305861);
    box-shadow: 0 0 10px rgba(0,0,0,0.2);
    border-radius: 20px;
    overflow: hidden;
}

.formulario-con-borde .form-label {
    color: white;
}

.borde-personalizado {
    border: 2px solid #1c2a29;
    border-radius: 12px;
}

.form-header {
    background-color: #478689;
    color: white;
}

.bg-footer {
    background-color: #478689;
    color: white;
}
</style>

@code {
    [Parameter] public Reserva reservaAux { get; set; } = new();
    [Parameter] public bool Mostrar { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private string? errorMessage;

    private async Task HandleSubmit()
    {
        errorMessage = null;

        try
        {
            var user = ServicioLogin.GetUser();
            if (user == null)
            {
                Navigation.NavigateTo("/");
                return;
            }

            if (reservaAux!.Id == 0)
            {
                Alta.Ejecutar(reservaAux, user.Id);
            }
            else
            {
                Modificar.Ejecutar(reservaAux, user.Id);
            }

            await Cerrar();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task Cerrar()
    {
        await OnClose.InvokeAsync();
    }
}