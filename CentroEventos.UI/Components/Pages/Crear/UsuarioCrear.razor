@page "/usuario-crear"
@rendermode InteractiveServer
@using CentroEventos.Aplicacion.Entidades
@using CentroEventos.Aplicacion
@using System.ComponentModel.DataAnnotations;
@using CentroEventos.Aplicacion.Enums 
@inject UsuarioAltaUseCase Alta
@inject ServicioAutorizacion ServicioAutorizacion
@inject ServicioLogin ServicioLogin
@inject NavigationManager Navigation


<div class="d-flex justify-content-center align-items-start w-100" style="min-height: calc(100vh - 4rem);">
    <div class="formulario-wrapper">
        <EditForm Model="@usAux" OnValidSubmit="HandleSubmit" FormName="crearUsuario" class="p-0 formulario-con-borde text-white">
            <DataAnnotationsValidator />
            
            @* Mensaje de éxito general *@
            @if (success)
            {
                <div class="alert alert-success">
                    Usuario creado correctamente.
                </div>
            }

            @* Mensaje de error genérico *@
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            <div class="form-header p-3 rounded-top">
                <h1 class="text-center m-0">Crear Usuario</h1>
            </div>

            <div class="p-4">
                <div class="mb-3">
                    <label for="nombre" class="form-label">Nombre</label>
                    <InputText @bind-Value="usAux.Nombre" class="form-control borde-personalizado text-dark" />
                    <ValidationMessage For="@(() => usAux.Nombre)" />
                </div>

                <div class="mb-3">
                    <label for="apellido" class="form-label">Apellido</label>
                    <InputText @bind-Value="usAux.Apellido" class="form-control borde-personalizado text-dark" />
                    <ValidationMessage For="@(() => usAux.Apellido)" />
                </div>

                <div class="mb-3">
                    <label for="email" class="form-label">Correo electrónico</label>
                    <InputText @bind-Value="usAux.Email" class="form-control borde-personalizado text-dark" />
                    <ValidationMessage For="@(() => usAux.Email)" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Contraseña</label>
                    <InputText type="password" @bind-Value="usAux.HashPassword" class="form-control borde-personalizado text-dark" />
                    <ValidationMessage For="@(() => usAux.HashPassword)" />
                </div>
            </div>
            <!-- Footer con botones alineados -->
            
            <div class="form-footer bg-footer d-flex gap-2 justify-content-end p-3 rounded-bottom">
                <button type="submit" class="btn btn-success">  Aceptar  </button>
                <button type="button" class="btn btn-danger" @onclick="Cancelar">Cancelar</button>
            </div>
            
        </EditForm>
    </div>
</div>


<style>
   .formulario-wrapper {
    max-width: 600px;
    width: 100%;
}

.formulario-con-borde {
    background: linear-gradient(to bottom, #1c2a29, #305861);
    box-shadow: 0 0 10px rgba(0,0,0,0.2);
    border-radius: 20px;
    overflow: hidden;
}

.formulario-con-borde .form-label {
    color: white;
}

.borde-personalizado {
    border: 2px solid #1c2a29 ;
    border-radius: 12px;
}

/* Header del formulario */
.form-header {
    background-color: #478689;
}

/* Footer de botones */
.bg-footer {
    background-color: #478689;
}
</style>


@code {

    private string? errorMessage;

    private bool success;
    private Usuario usAux = new Usuario();

    private Usuario? user;

    


    private void Cancelar() => Navigation.NavigateTo("/");
    private async Task HandleSubmit()
    {
        success = false;
        errorMessage = null;

        try
        {
            
            user = ServicioLogin.GetUser();
            if (user == null)
            {
                Navigation.NavigateTo("/");
                return;
            }

            if (!ServicioAutorizacion.PoseeElPermiso(user.Id, EnumPermiso.UsuarioAlta))
            {
                Navigation.NavigateTo("/no-autorizado");
                return;
            }

            Alta.Ejecutar(usAux, user!.Id);
            success = true;
            await Task.Delay(1000);
            Navigation.NavigateTo("/persona-listar");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

public class UsuarioAux
{
    public int Id { get; set; }

    [Required(ErrorMessage = "El nombre es obligatorio.")]
    public string Nombre { get; set; } = string.Empty;

    [Required(ErrorMessage = "El apellido es obligatorio.")]
    public string Apellido { get; set; } = string.Empty;

    [Required(ErrorMessage = "El email es obligatorio.")]
    [EmailAddress(ErrorMessage = "Formato de email inválido.")]
    public string Email { get; set; } = string.Empty;

    [Required(ErrorMessage = "La contraseña es obligatoria.")]
    [MinLength(6, ErrorMessage = "La contraseña debe tener al menos 6 caracteres.")]
    public string HashPassword { get; set; } = string.Empty;
}

}
